---
CVE: CVE-0000-0000
CWE:
announced: 0000-00-00 00:00:00.0000000 -00:00
description_instructions: |
   You can get an initial description from the CVE entry on cve.mitre.org. These descriptions are a fine start, but they can  be kind of jargony.

   Rewrite this description in your own words. Make it interesting and easy to read to anyone with some programming experience. We can always pull up the NVD description later to get more technical.

   Try to still be specific in your description, but remove cromium-specific stuff. Remove refernces to versions, specific filenames, and other jargon that outsiders to Chromium would not understand. Technology like "regular expressions" is fine, and security phrases like "invalid write" are fine to keep too.
description:
bounty:
   date:
   amount:
   references: []
reviews: []
bugs: []
repo: 
fixes_vcc_instructions: |
   Please put in the commit hash in "commit" below (see my example in CVE-2011-3092.yml). Fixes and vccs follow the same format.
fixes: []
vccs: []
upvotes_instructions: |
   For the first round, ignore this upvotes number.

   For the second round of reviewing, you will be giving a certain amount of upvotes to each vulnerability you see. Your peers will tell you how interesting they think this vulnerability is, and you'll add that to the upvotes score on your branch.
upvotes:
unit_tested:
   question: |   
      Were automated unit tests involved in this vulnerability? Was the original code unit tested, or not unit tested? Did the fix involve improving the automated tests?

   For the "code" answer below, look not only at the fix but the surrounding code near the fix and determine if and was there were unit tests involved for this module.

   For the "fix" answer below, check if the fix for the vulnerability involves adding or improving an automated test to ensure this doesn't happen again.
   answer:
   code:
   fix:
discovered:
   questions: |
      How was this vulnerability discovered?

      Go to the bug report and read the conversation to find out how this was originally found. Answer in longform below in "answer", fill in the date in YYYY-MM-DD, and then determine if the vulnerability was found by a Google employee (you can tell from their email address). If it's clear that the vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.

    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may leave this part blank.
   answer:
   date:
   automated:
   google:
   contest:
subsystem:
   question: |
      What subsystems was the mistake in?
    
      Look at the path of the source code files code that were fixed to get directory names. Look at comments in the code. Look at the bug reports how the bug report was tagged.
   answer:
   name:
interesting_commits:
   question: |
